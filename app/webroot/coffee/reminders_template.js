// Generated by CoffeeScript 1.6.2
(function() {
  var auto_fill_clients, auto_fill_employees, auto_fill_employees_clients, build_reminders, build_voids, client_formatted, client_name, clients, contracts, displayTime, do_edit_notes, do_email, do_timecard, do_void, edit_notes_button, email_button, employee_formatted, employee_log_formatted, employee_name, employees, isEven, move_reminder_to_void, php_timestamp, register_button_callbacks, reminders, reminders_buttons, remove_reminder_from_reminders, rollover_on_buttons, settings, timecard_button, void_button;

  reminders = 'REMINDERS';

  employees = 'EMPLOYEES';

  clients = 'CLIENTS';

  contracts = 'CONTRACTS';

  settings = 'SETTINGS';

  client_formatted = function(client) {
    return client.n;
  };

  employee_formatted = function(employee) {
    var res;

    res = employee.f + ' ' + employee.l;
    return res;
  };

  employee_log_formatted = function(id) {
    var log, logs, res;

    logs = reminders.reminders[id].r_log;
    res = '';
    for (log in logs) {
      res = '<ul class="employee-ems">';
      res = res + '<li class="employee-emails">';
      if (logs[log].em != null) {
        res = res + logs[log].em;
      }
      res = res + '</li>';
      res = res + '<li class="employee-timestamp">';
      if (logs[log].ts != null) {
        res = res + logs[log].ts;
      }
      res = res + '</li>';
      res = res + '</ul>';
    }
    return res;
  };

  do_email = function() {
    var data, id, str, substr, url;

    str = this.id;
    substr = str.split("-");
    id = substr[2];
    url = $('#soap-reminders-soap_email-url').html();
    data = {
      id: id
    };
    $("#reminders-waiting-area").addClass("waiting div400x100");
    $.post(url, data, (function(data) {
      var i, taglist, taglisthtml;

      taglisthtml = "";
      taglist = data["taglist"];
      return i = 0;
    }), "json");
    $("#reminders-waiting-area").removeClass("waiting div400x100");
    return $("#modal-overlay").hide();
  };

  do_timecard = function() {
    var data, url;

    url = $('#soap-invoices-timecard_received-url').html();
    data = {
      id: $('input#contact-add-form-last').val(),
      reminders: JSON.stringify(reminders),
      timecards: JSON.stringify(timecards)
    };
    return alert(url);
  };

  displayTime = function() {
    var currentTime, hours, minutes, seconds, str;

    str = "";
    currentTime = new Date();
    hours = currentTime.getHours();
    minutes = currentTime.getMinutes();
    seconds = currentTime.getSeconds();
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    str += hours + ":" + minutes + ":" + seconds;
    return str;
  };

  php_timestamp = function() {
    var date, day, days, displaydow, displaymonth, displaytime, dow, month, months, ts, year, yy;

    days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    date = new Date();
    day = date.getDate();
    month = date.getMonth() + 1;
    yy = date.getYear();
    year = (yy < 1000 ? yy + 1900 : yy);
    year = year.toString();
    dow = date.getDay();
    displaytime = displayTime();
    displaydow = days[dow];
    displaymonth = months[month];
    ts = displaydow + ', ';
    ts = ts + day + ' ';
    ts = ts + displaymonth + ' ';
    ts = ts + year + ' ';
    ts = ts + displaytime;
    return ts;
  };

  move_reminder_to_void = function(id) {
    var key, reminder, reminders_tmp, _results;

    reminders.voids[id] = reminders.reminders[id];
    reminders_tmp = {};
    reminders_tmp.reminders = {};
    _results = [];
    for (key in reminders.reminders) {
      if (key !== id) {
        reminder = reminders.reminders[key];
        reminders_tmp.reminders[key] = {};
        _results.push(reminders_tmp.reminders[key] = reminder);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  remove_reminder_from_reminders = function(id) {
    var key, reminder, reminders_tmp, ts;

    reminders_tmp = {};
    reminders_tmp.reminders = {};
    for (key in reminders.reminders) {
      if (key !== id) {
        reminder = reminders.reminders[key];
        reminders_tmp.reminders[key] = {};
        reminders_tmp.reminders[key] = reminder;
      }
    }
    ts = php_timestamp;
    return reminders.reminders = reminders_tmp.reminders;
  };

  do_void = function() {
    var data, id, str, substr, updown, url;

    str = this.id;
    substr = str.split("-");
    id = substr[2];
    url = settings.urls.soap_invoices_set_void_url;
    if ($("#reminder-void-" + id).html() === 'Void This Reminder') {
      updown = 1;
      move_reminder_to_void(id);
      remove_reminder_from_reminders(id);
      $("#reminder-void-" + id).html("Voided");
      $("#reminder-index-row-" + id).hide();
    } else {
      updown = 0;
      $("#reminder-void-" + id).html("Void This Reminder");
    }
    data = {
      id: id,
      reminders: JSON.stringify(reminders),
      updown: updown
    };
    $("#reminders-waiting-area").addClass("waiting div400x100");
    $("#reminders-waiting-area").center().css("zIndex", 11);
    $("#modal-overlay").fadeIn();
    return $.post(url, data, (function(data) {
      var i, taglist, taglisthtml;

      taglisthtml = "";
      taglist = data["taglist"];
      i = 0;
      $("#reminders-waiting-area").removeClass("waiting div400x100");
      return $("#modal-overlay").hide();
    }), "json");
  };

  do_edit_notes = function() {
    var url;

    url = $('#soap-invoices-soap_edit-notes-url').html();
    return alert(url);
  };

  register_button_callbacks = function(dum) {
    $('div.reminder-email').on('click', do_email);
    $('div.reminder-timecard').on('click', do_timecard);
    $('div.reminder-void').on('click', do_void);
    return $('div.reminder-edit-notes').on('click', do_edit_notes);
  };

  edit_notes_button = function(id) {
    return '<li><div class="reminder-edit-notes" id="reminder-edit-notes-' + id + '">Edit Notes</div></li>';
  };

  void_button = function(id) {
    return '<li><div class="reminder-void" id="reminder-void-' + id + '">Void This Reminder</div></li>';
  };

  timecard_button = function(id) {
    return '<li><div class="reminder-timecard" id="reminder-timecard-' + id + '">Waiting For Timecard</div></li>';
  };

  email_button = function(id) {
    return '<li><div class="reminder-email" id="reminder-email-' + id + '">Email Reminder</div></li>';
  };

  client_name = function(id, type) {
    return '<div class="' + type + '-client inline" id="' + type + '-client-' + id + '"></div>';
  };

  employee_name = function(id, type) {
    return '<div class="' + type + '-employee inline" id="' + type + '-employee-' + id + '"></div>';
  };

  reminders_buttons = function(id) {
    var res;

    res = '<ul class="reminders-actions">' + email_button(id) + timecard_button(id) + void_button(id) + edit_notes_button(id) + '</ul>';
    return res;
  };

  rollover_on_buttons = function(dum) {
    $("div.reminder-email").mouseover(function() {
      return $(this).css('backgroundColor', '#EE178C').css('color', 'white');
    });
    $("div.reminder-email").mouseout(function() {
      return $(this).css('backgroundColor', 'yellow').css('color', 'darkgreen');
    });
    $("div.reminder-timecard").mouseover(function() {
      return $(this).css('backgroundColor', '#EE178C').css('color', 'white');
    });
    $("div.reminder-timecard").mouseout(function() {
      return $(this).css('backgroundColor', 'lightsalmon').css('color', 'darkred');
    });
    $("div.reminder-void").mouseover(function() {
      return $(this).css('backgroundColor', '#EE178C').css('color', 'white');
    });
    $("div.reminder-void").mouseout(function() {
      return $(this).css('backgroundColor', 'green').css('color', 'white');
    });
    $("div.reminder-edit-notes").mouseover(function() {
      return $(this).css('backgroundColor', '#EE178C').css('color', 'white');
    });
    return $("div.reminder-edit-notes").mouseout(function() {
      return $(this).css('backgroundColor', 'darkblue').css('color', '#fffacd');
    });
  };

  isEven = function(value) {
    if (value % 2 === 0) {
      return true;
    } else {
      return false;
    }
  };

  auto_fill_employees = function(type) {
    return $("[id^=" + type + "-employee-]").each(function() {
      var reminder, str, substr, substr2, voided;

      str = this.id;
      substr = str.split("-");
      substr2 = String(substr).split(',');
      if (type === 'reminder') {
        reminder = reminders.reminders[substr2[2]];
        if (typeof reminder.e_id !== 'undefined') {
          $("#" + this.id).html(employee_formatted(employees.employees[reminder.e_id]));
        }
      }
      if (type === 'void') {
        voided = reminders.voids[substr2[2]];
        if (typeof voided.e_id !== 'undefined') {
          return $("#" + this.id).html(employee_formatted(employees.employees[voided.e_id]));
        }
      }
    });
  };

  auto_fill_clients = function(type) {
    return $("[id^=" + type + "-client-]").each(function() {
      var reminder, str, substr, voided;

      str = this.id;
      substr = str.split("-");
      if (type === 'reminder') {
        reminder = reminders.reminders[substr[2]];
        if (typeof reminder.e_id !== 'undefined') {
          $("#" + this.id).html(client_formatted(clients.clients[reminder.c_id]));
        }
      }
      if (type === 'void') {
        voided = reminders.voids[substr[2]];
        if (typeof voided.e_id !== 'undefined') {
          return $("#" + this.id).html(client_formatted(clients.clients[voided.c_id]));
        }
      }
    });
  };

  auto_fill_employees_clients = function(type) {
    auto_fill_employees(type);
    return auto_fill_clients(type);
  };

  build_reminders = function(dum) {
    var j, k, res;

    $('div#reminders-index').empty();
    j = 1;
    for (k in reminders.reminders) {
      res = '';
      if (isEven(j++)) {
        res = res + '<div id="reminder-index-row-' + k + '"class="reminder-index-row altrow">' + ' ';
      } else {
        res = res + '<div id="reminder-index-row-' + k + '"class="reminder-index-row ">' + ' ';
      }
      res = res + '<div class="header ">' + ' ';
      res = res + employee_name(k, 'reminder') + ' ' + client_name(k, 'reminder') + ' ';
      res = res + '</div>' + ' ';
      res = res + '<div class="reminder-index-row-left-cell ">' + ' ';
      res = res + reminders.reminders[k].ps + '-' + reminders.reminders[k].pe + employee_log_formatted(k) + '</div>';
      res = res + '<div class="reminder-index-row-right-cell">' + ' ';
      res = res + reminders_buttons(k) + '</div>';
      res = res + '<div id="reminders-footer">' + reminders.reminders[k].n + '</div>';
      res = res + '</div>';
      $('div#reminders-index').append(res);
    }
    register_button_callbacks(1);
    return auto_fill_employees_clients('reminder');
  };

  build_voids = function(dum) {
    var j, k, res;

    $('div#voids-index').empty();
    j = 1;
    for (k in reminders.voids) {
      res = '';
      if (isEven(j++)) {
        res = res + '<div id="void-index-row-' + k + '"class="void-index-row altrow">' + ' ';
      } else {
        res = res + '<div id="void-index-row-' + k + '"class="void-index-row ">' + ' ';
      }
      res = res + '<div class="header ">' + ' ';
      res = res + employee_name(k, 'void') + ' ' + client_name(k, 'void') + '</div>';
      res = res + '<div class="void-index-row-left-cell ">' + ' ';
      res = res + reminders.voids[k].ps + '-' + reminders.voids[k].pe + '</div>';
      res = res + '<div class="void-index-row-right-cell">' + ' ';
      res = res + reminders_buttons(k) + '</div>';
      res = res + '<div id="void-footer">' + reminders.voids[k].n + '</div>';
      res = res + '</div>';
      $('div#voids-index').append(res);
    }
    register_button_callbacks(1);
    return auto_fill_employees_clients('void');
  };

  $(document).ready(function() {
    build_reminders(1);
    rollover_on_buttons(1);
    $('#reminders-edit-notes-form').hide();
    $("#reminders-waiting-area").removeClass("waiting div400x100");
    $("#modal-overlay").hide();
    $(".reminder-tabs").tabs();
    return $(".reminder-tabs").tabs({
      select: function(event, ui) {
        var tabName, tabNumber;

        tabNumber = ui.index;
        tabName = $(ui.tab).text();
        if (tabName === "Timecard Reminders") {
          build_reminders(1);
        }
        if (tabName === "Timecards") {
          alert(tabName);
        }
        if (tabName === "Opens Invoices") {
          alert(tabName);
        }
        if (tabName === "Timecard Receipts Pending") {
          alert(tabName);
        }
        if (tabName === "Timecard Receipts Sent") {
          alert(tabName);
        }
        if (tabName === "VOIDED") {
          return build_voids(1);
        }
      }
    });
  });

}).call(this);

/*
//@ sourceMappingURL=reminders_template.map
*/
